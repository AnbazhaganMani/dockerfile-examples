# Base image (Erlang on SLES12)
FROM erlang_sles12:latest

# The author
MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)

# Install dependencies
RUN zypper install -y \
        libicu-devel \
        libcurl4 \
        libcurl-devel \
        git \
        wget \
        mozilla-nspr \
        mozilla-nspr-devel \
        autoconf213 \
        zip \
        fontconfig \
        fontconfig-devel \
        pkg-config \
        libasound2 \
        yasm \
        tar \
        make \
        gtk2-devel \
        libXt-devel \
        libIDL-2-0 \
        libidl-devel \
        libfreetype6 \
        libgstreamer-1_0-0 \
        dbus-1-devel \
        dbus-1-glib-devel \
        libnotify4 \
        libnotify-devel \
        python \
        wget \
        perl \
        perl-base \
        java-1_7_1-ibm \
        java-1_7_1-ibm-devel \
        libopenssl-devel \
        libssh-devel \
        ncurses-devel \
        unixODBC \
        unixODBC-devel \
        mozjs17-devel \
        gcc-c++

# Set work directory to /
WORKDIR /

# To resolve the js dependency, get the js code from ftp.mozilla.org
RUN wget http://ftp.mozilla.org/pub/mozilla.org/js/js185-1.0.0.tar.gz

# Untar and copy the modified source code files in the js code
RUN tar zxf js185-1.0.0.tar.gz && cd js-1.8.5/js/src
COPY Makefile.in /js-1.8.5/js/src/
COPY jsval.h /js-1.8.5/js/src/
COPY jsvalue.h /js-1.8.5/js/src/

# Set work directory to /js-1.8.5/js/src
WORKDIR /js-1.8.5/js/src

# Build and install js
RUN autoconf-2.13
RUN mkdir build_OPT.OBJ
WORKDIR /js-1.8.5/js/src/build_OPT.OBJ
RUN ../configure --prefix=/usr && make && make check && make install

# Set work directory to /
WORKDIR /

# Clone Node.js code from github
RUN git clone https://github.com/andrewlow/node.git

# Build and install Node.js
RUN cd node/ && ./configure && make && make install

# Set work directory to /
WORKDIR /

# Clone rebar code from github
RUN git clone git://github.com/rebar/rebar.git

# Build rebar
RUN cd rebar && ./bootstrap

# Set work directory to /rebar
WORKDIR /rebar

# Copy rebar binary to /usr/local/bin
RUN cp rebar /usr/local/bin/

# Set work directory to /
WORKDIR /

# Clone CouchDB code from github
RUN git clone https://git-wip-us.apache.org/repos/asf/couchdb.git

# Set work directory to /couchdb
WORKDIR /couchdb

# Checkout developer-preview-2.0 branch of CouchDB from github
RUN git checkout developer-preview-2.0

# Set LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH /usr/lib

# Build CouchDB
RUN ./configure -p /opt/couchdb -c && make && make check

# CouchDB ports
EXPOSE 15984 25984 35984

# Run the CouchDB
CMD ["python", "/couchdb/dev/run"]

