########## Linux on z Systems Dockerfile for Puppet-4.2.0 #########
#
# This Dockerfile builds a basic installation of Puppet.
#
# Puppet is an open-source configuration management tool in computing. It runs on many Unix-like systems 
# as well as on Microsoft Windows, and includes its own declarative language to describe system configuration.
#
# To build this image, from the directory containing this Dockerfile
# (assuming that the file is named Dockerfile):
# docker build -t <image_name> .
#
# To view whether Puppet has been built successfully, create a container from the image
# docker run --name <container_name> -p <port>:8140 -d <image_name>
#
####################################################################

# Disclaimer: 
# 1. This base image was built using http://containerz.blogspot.co.uk/2015/03/creating-base-images.html
#    and was configured to access suitable repositories for installing dependent software packages.

# Base image
FROM rhel7:latest

# The author
MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)

# Install dependencies
RUN yum install -y gcc-c++ \
		   readline-devel tar openssl \
	  	   unzip libyaml-devel PackageKit-cron \
		   openssl-devel make git \
		   wget sqlite-devel

# Download and Install ruby 2.1.6
RUN wget http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.6.tar.gz && \
    tar -xvf ruby-2.1.6.tar.gz && cd ruby-2.1.6 && \
    ./configure && make && make install

# Download and Install rubygems 2.1.6
RUN wget http://production.cf.rubygems.org/rubygems/rubygems-2.1.6.tgz && \
    tar -xvf rubygems-2.1.6.tgz && \
    cd rubygems-2.1.6 && ruby  setup.rb

# Install dependency gems
RUN gem install sqlite3 -v 1.3.10 && \
    gem install bundler rake-compiler

# Expose default Puppet master port
EXPOSE 8140

# Add New User, as it is always advisable to build & run tests as another user
RUN useradd -d /home/puppet -m -s /bin/bash puppet

# Change working directory to /home/puppet
WORKDIR /home/puppet 

# Switch user to puppet
USER puppet 

# Clone puppet git repository, checkout 4.2.0 branch and install dependency gems
RUN git clone --branch 4.2.0 git://github.com/puppetlabs/puppet && \
    cd puppet && bundle install --path .bundle/gems/

# Switch user to root
USER root

# Create User,Group -  puppet
RUN cd puppet && \
    bundle exec puppet resource user puppet ensure=present && \
    bundle exec puppet resource group puppet ensure=present

# Create test files 
RUN echo  -e \#\!/bin/bash \\n  \
                        set -e \\n \
                        echo \"---------------------------Running Unit testcases as puppet user----------------------------\" \\n \
                        declare -a unittests2 \\n \
                        \# Run ssl\,face\,indirector\,network testcases as puppet as it expect certicates owned \\n \
                        \# by puppet user \\n \
                        unittests2\=$\(ls spec\/unit\|egrep \"ssl\|face\|indirector\|network\"\) \\n \
                        unittest_list2\=\(\$unittests2\) \\n \
                        for i in \"\${unittest_list2[@]}\" \\n \
                        do \\n \
                        bundle exec rspec \"spec/unit/\$i\" \\n \
                        done \\n \
                        echo \"------------------------Running Integration testcases as puppet user-----------------\" \\n \
                        declare -a integration2 \\n \
                        \# Run all the testcases except provider\,type as puppet user and these require root/sudo previleges \\n \
                        \# data_binding.rb doesn\'t involve any testcases \\n \
                        integration2\=$\(ls spec/integration\|egrep -v \"data_binding.rb\|provider\|type\"\) \\n \
                        integration_list2\=\(\$integration2\) \\n \
                        for j in \"\${integration_list2[@]}\" \\n \
                        do \\n \
                        bundle exec rspec \"spec/integration/\$j\" \\n \
                        done >  puppet/puppetuser_test.sh

RUN echo -e \#\!/bin/bash \\n \
                        set -e \\n \

                        echo \"------------------------------------Running Unit testcases as root user----------------\" \\n \
                        declare -a unittests1 \\n \
                        \# Run all testcases execpt ssl\,face\,indirector\,network testcases as root user. \\n \
                        unittests1\=$\(ls spec/unit\|egrep -v \"ssl\|face\|indirector\|network\"\) \\n \
                        unittest_list1\=\(\$unittests1\) \\n \
                        for i in \"\${unittest_list1[@]}\" \\n \
                        do \\n \
                        bundle exec rspec \"spec/unit/\$i\" \\n \
                        done \\n \
                        echo \"-------------------------------Running Integration testcases as root user-----------------------\" \\n \
                        declare -a integration1 \\n \
                        \# Run provider,type testcases as root user as they require additional previleges \\n \
                        integration1\=$\(ls spec/integration\|egrep \"provider\|type\"\) \\n \
                        integration_list1\=\(\$integration1\) \\n \
                        for j in \"\${integration_list1[@]}\" \\n \
                        do \\n \
                        bundle exec rspec --exclude-pattern ./spec/integration/provider/service/systemd_spec.rb \"spec/integration/\$j\" \\n \
                        done >  puppet/rootuser_test.sh

# Change permissions of rootuser_test.sh,puppetuser_test.sh
RUN chmod +x puppet/rootuser_test.sh && chmod +x puppet/puppetuser_test.sh

# Reinstall glibc-common
RUN yum reinstall -y glibc-common

# Switch user to puppet
USER puppet

# Initialize puppetlabs configuration
RUN cd puppet && bundle exec puppet config print

# Create config directories 
RUN cd .puppetlabs && mkdir -p var/log && mkdir -p var/run && \
    mkdir -p etc/code/modules && mkdir -p etc/code/environments/production/manifests && \
    mkdir -p etc/puppet/ && mkdir -p puppet code

# Edit the file_spec testcase to support s390x environment
RUN sed -i "s/end\.to raise_error(Puppet::FileBucket::BucketError, \/Got passed new contents\/)/should compile\.and_raise_error(Puppet::FileBucket::BucketError, \/Got passed new contents\/)\nend/" puppet/spec/unit/indirector/file_bucket_file/file_spec.rb

# Run unit and integration testcases as puppet user
RUN cd puppet && ./puppetuser_test.sh

# Switch user to root
USER root

# Run unit and integration testcases as root user
RUN cd puppet && export LC_ALL="en_US.UTF8" && \
    ./rootuser_test.sh

# Create puppet.conf,site.pp to expected locations
RUN echo -e [main] \\n \
    certname \= puppet_host_name \\n \
    logdir \= \/home\/puppet\/.puppetlabs\/var\/log \\n \
    rundir \= \/home\/puppet\/.puppetlabs\/var\/run \\n \
    basemodulepath \= \/home\/puppet\/.puppetlabs\/etc\/code\/modules \\n \
    server \= puppet_host_name \\n \
    user  \= puppet \\n \
    group \= puppet \\n \
    archive_files \= true \\n \
    pluginsync \= true \\n \
        \# This section is used by the Puppet master and Puppet cert applications. \\n \
    [master] \\n \
    certname \= puppet_host_name \\n \
    dns_alt_names \= puppet_host_name\,puppetmaster01\,puppetmaster01.example.com\,puppet\,puppet.example.com \\n \
    reports \= none \\n \
    ssl_client_header \= SSL_CLIENT_S_DN \\n \
    ssl_client_verify_header \= SSL_CLIENT_VERIFY \\n \
    storeconfigs \= false \\n \
    autosign \= true \\n \
        \# This section is used by the Puppet agent application. \\n \
        [agent] \\n \
    report \= true \\n \
    classfile \= \$vardir\/classes.txt \\n \
    localconfig \= \$vardir\/localconfig \\n \
    graph \= true \\n \
    pluginsync \= true \\n \
    environment \= production > .puppetlabs/etc/puppet/puppet.conf
	
RUN echo -e class install_apache \\n \
                        {  \\n \
                                package { \'httpd\'\: \\n \
                                ensure \=\> installed, \\n \
                        } \\n \
                                exec { \"start_service\"\: \\n \
                                command \=\> \"\/usr\/sbin\/httpd\"\, \\n \
                        } \\n \
                        } \\n \
                        node \/\\w\+\/ \\n \
                        { \\n \
                        include install_apache   } > .puppetlabs/etc/code/environments/production/manifests/site.pp
						
# Change the file permissions
RUN chown puppet:users .puppetlabs/etc/puppet/puppet.conf && \
    chown puppet:users .puppetlabs/etc/code/environments/production/manifests/site.pp

# Create server_setup.sh and change file permissions
RUN echo -e \#\!\/bin\/bash \\n \
                        \# Get container hostname \\n \
                        hostname\=\`hostname -f\` \\n \
                        echo \$hostname \\n \
                        \# Edit puppet.conf with hostname \\n \
                        sed -i \"s\/puppet_host_name\/\$hostname\/g\" \/home\/puppet\/.puppetlabs\/etc\/puppet\/puppet.conf \\n \
                        su puppet\<\<EOF \\n \
                        \# Start Puppet master \\n \
                        bundle exec puppet master --verbose --no-daemonize --autosign true \\n \
                        EOF \\n \
                        exit 0 > puppet/server_setup.sh
						
RUN chmod +x  puppet/server_setup.sh

# Change working directory to /home/puppet/puppet
WORKDIR /home/puppet/puppet

# Setup the puppet master service at container run
CMD ./server_setup.sh
