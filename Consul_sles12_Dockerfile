########## Linux on z Systems Dockerfile for Consul version 0.5.2 #########
#
# This Dockerfile builds a basic installation of Consul and is designed on top of gccgo image. 
# Refer gccgo dockerfile from https://github.com/linux-on-ibm-z/dockerfile-examples/blob/master/gccgo_sles12_Dockerfile
#
# ####################### Build gccgo image ######################
#
# To build "gccgo" image from the directory containing its Dockerfile
# (assuming that the file is named "Dockerfile"):
# docker build -t <image-name> . 
# e.g. docker build -t gccgo_sles12_image . 
# This image will be used as a Base image for Consul Dockerfile.
# 
# ####################### Build Consul image ######################
#
# To build Consul image from the directory containing this Dockerfile
# (assuming that the file is named "Dockerfile"):
# docker build -t <image_name> .
#
# ####################### Consul Server ######################
# A. Below instructions will start a Consul server :
#   1. Create a server.json file to pass configuration parameters to Consul server. The sample server.json is as follows:
#   
#   cat server.json
#   {
#     "datacenter": "<your-datacenter-name>",
#     "data_dir": "/opt/consulserver",
#     "log_level": "INFO",
#     "node_name": "<your-server-node-name>",
#     "server": true,
#     "bootstrap": true,
#     "ports" : {
#   
#       "dns" : -1,
#       "http" : <http-port>,
#       "rpc" : <RPC-port>,
#       "serf_lan" : <LAN-port>,
#       "serf_wan" : <WAN-port>,
#       "server" : <internal-consul-port>
#     }
#   }
#   
#   2. Run a Consul agent in server mode:
#      
#     docker run -v `pwd`/server.json:/tmp/server.json -p <internal-consul-port>:<internal-consul-port> \ 
# 	 		 -p <LAN-port>:<LAN-port> -p <LAN-port>:<LAN-port>/udp -p <WAN-port>:<WAN-port> \ 
# 	 		 -p <WAN-port>:<WAN-port>/udp -p <RPC-port>:<RPC-port> -p <http-port>:<http-port> \ 
#   			 -p <DNS-port>:<DNS-port>/udp \ 
#   			 -d <image_name> agent -config-dir=/tmp/server.json
#   
#     e.g. docker run -v `pwd`/server.json:/tmp/server.json-p 4300:4300 -p 4301:4301 -p 4301:4301/udp \ 
# 	 			 -p 4302:4302 -p 4302:4302/udp -p 4400:4400 -p 4500:4500 -p 4600:4600/udp  \ 
#     		     -d <image_name> agent -config-dir=/tmp/server.json
#   
# ####################### Consul Agent #######################
# B. Below instructions will start a Consul agent:
#   1. Create a client.json file to pass configuration parameters to Consul client. The sample client.json is as follows:
#   
#    cat client.json
#    {
#     "datacenter": "<your-datacenter-name>",
#     "data_dir": "/opt/consulclient",
#     "log_level": "INFO",
#     "node_name": "<your-client-node-name>",
#     "ui_dir": "<path-to-ui-dir>"
#     "client_addr": "0.0.0.0",
#     "ports" : {
#   
#       "dns" : -1,
#       "http" : <http-port>,
#       "rpc" : <RPC-port>,
#       "serf_lan" : <LAN-port>,
#       "serf_wan" : <WAN-port>,
#       "server" : <internal-consul-port>
#     },
#     "start_join" : [
#      "<consul-server-ip-address>:<LAN-port-of-consul-server>"
#      ]
#   }
#   
#   2. Run a Consul agent in client mode:
#     docker run -v `pwd`/client.json:/tmp/client.json -p <internal-consul-port>:<internal-consul-port> \ 
# 	 		 -p <LAN-port>:<LAN-port> -p <LAN-port>:<LAN-port>/udp -p <WAN-port>:<WAN-port> 
# 	 		 -p <WAN-port>:<WAN-port>/udp -p <RPC-port>:<RPC-port> -p <http-port>:<http-port> \ 
#   			 -p <DNS-port>:<DNS-port>/udp  \ 
#   			 -d <image_name> agent -config-dir=/tmp/client.json
#   
#     e.g. docker run -v `pwd`/client.json:/tmp/client.json -p 8300:8300 -p 8301:8301 -p 8301:8301/udp \ 
# 	 			 -p 8302:8302 -p 8302:8302/udp -p 8400:8400 -p 8500:8500 -p 8600:8600/udp \ 
# 	 			 -d <image_name> agent -config-dir=/tmp/client.json
#   
#   
# C. To access Consul web user interface, visit http://<consul-agent-ip>:8500/ui/ 
#
# D. Visit http://www.mammatustech.com/consul-service-discovery-and-health-for-microservices-architecture-tutorial to register a new service.
#

#####################################################################

# Base image
FROM gccgo_sles12_image:latest

# The author 
MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)

# Install following build dependencies
RUN zypper install -y git-core unzip wget

# Create a working directory for Consul
RUN mkdir /consul_workspace

# Change to working directory 
WORKDIR /consul_workspace

# Set GO environment variables
ENV GOPATH /consul_workspace
ENV CGO_LDFLAGS "-L /lib64 -l pthread"

# Create a Consul directory workspace structure
RUN mkdir -p $GOPATH/src/github.com/hashicorp/

# Change to working directory
WORKDIR $GOPATH/src/github.com/hashicorp/

# Clone the source code from github
RUN git clone --branch=v0.5.2 https://github.com/hashicorp/consul.git

# Change to working directory
WORKDIR $GOPATH/src/github.com/hashicorp/consul

# Build Consul
RUN make

# Create a Web UI directory
RUN mkdir $GOPATH/consul_web_ui

# Change work directory
WORKDIR $GOPATH/consul_web_ui

# Download Web UI source code
RUN wget https://releases.hashicorp.com/consul/0.5.2/consul_0.5.2_web_ui.zip

# Extract UI source code 
RUN unzip consul_0.5.2_web_ui.zip

# Change directory back to Consul directory
WORKDIR $GOPATH/src/github.com/hashicorp/consul

# Mount volume for Consul data
VOLUME /opt/consul-data-dir

# Entrypoint for Consul binary
ENTRYPOINT ["bin/consul"]

# The default command for an application is --help, if you wish to use it as an interactive container please
# comment out the CMD ["--help"] and add CMD ["/bin/bash"] instead of CMD ["--help"]
CMD ["--help"]

# END
