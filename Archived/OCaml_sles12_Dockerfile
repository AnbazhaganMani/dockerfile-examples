########## Linux on z Systems Dockerfile for OCaml-4.02.2 #####################
#
# This Dockerfile builds a basic installation of OCaml.
#
# OCaml is an industrial strength programming language supporting functional, 
# imperative and object-oriented styles
#
# To build this image, from the directory containing this Dockerfile
# (assuming that the file is named Dockerfile):
# docker build -t <image_name> .
#
# To create an OCaml container run the below command.
# docker run --name <container_name> -v <ocaml_file_path_in_host>:<ocaml_file_path_in_container> -d <image_name> <ocaml_file_path_in_container>
# For example : docker run --name <container_name> -v /home/test.ml:/home/test.ml -d <image_name> /home/test.ml
#
##############################################################################

# Disclaimer: 
# 1. This base image was built using http://containerz.blogspot.co.uk/2015/03/creating-base-images.html
#    and was configured to access suitable repositories for installing dependent software packages.

# Base image
FROM sles12:latest

# The author
MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)

# Install dependencies
RUN zypper install -y wget tar gcc make

# Set work directory to /
WORKDIR /

# Download the OCaml source tarball from OCaml site
RUN wget http://caml.inria.fr/pub/distrib/ocaml-4.02/ocaml-4.02.2.tar.gz 

# Unzip the tarball
RUN tar -zxvf ocaml-4.02.2.tar.gz

# Set work directory to /ocaml-4.02.2
WORKDIR /ocaml-4.02.2

# Configure the system
RUN ./configure

# Build the OCaml bytecode compiler
RUN make world

# Recompile all OCaml sources with the newly created compiler
RUN make bootstrap

# Switch to root (or other superuser), move to the expanded ocaml-4.02.2 directory, and install
RUN su root && umask 022 && make install

# Verify the build by running the provided testsuite, from top directory
WORKDIR /ocaml-4.02.2/testsuite
RUN make all

# Start OCaml
ENTRYPOINT ["ocaml"]

